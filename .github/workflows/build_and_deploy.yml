name: Build IOT-DEMO
# Controls when the workflow will run
on: 
  push:
    branches:
      - master

env:
  SIMULATOR_AZURE_FUNCTIONS: simulator-azure-functions # set this to your application's name
  SIMULATOR_AZURE_FUNCTIONS_PACKAGE_PATH: "./IoTDeviceSimulator/azure-functions/" # set this to the path to your web app project, defaults to the repository root
  IoTSERVICE_AZURE_FUNCTIONS: IoTService # set this to your application's name
  IoTSERVICE_AZURE_FUNCTIONS_PACKAGE_PATH: "./IoTService/azure-functions/" # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: "18" # set this to the node version you wish to use for the project

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job creates optimized build of IoT Visualizer project
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    defaults:
      run:
        # Setting up default working space to run the commands
        working-directory: ./IoTVisualizer/  
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Setting up the node js
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          # Cache dependencies for projects
          cache-dependency-path: "./IoTVisualizer/package-lock.json"
      # Getting information about events when pipline triggers
      - name: Github action event information
        run: |
          echo github.event_name - ${{github.event_name}}   
          echo github.event.pull_request.merged - ${{github.event.pull_request.merged }}
          echo github.event.action - ${{github.event.action}}
          echo IoT Visualizer running - ${{ needs.changes_deployment.outputs.IoTVisualizer}}
      # Install dependencies for projects
      - name: Install dependencies
        run: npm ci
      # Creating .env file dynamically
      - name: "Create env file"
        run: |
          touch .env
          > .env
          echo IMJS_ITWIN_ID = ${{secrets.IMJS_ITWIN_ID}}  >> .env
          echo IMJS_IMODEL_ID =  ${{secrets.IMJS_IMODEL_ID}} >> .env
          echo IMJS_AUTH_CLIENT_CLIENT_ID = ${{secrets.IMJS_AUTH_CLIENT_CLIENT_ID}} >> .env
          echo IMJS_AUTH_CLIENT_REDIRECT_URI = ${{secrets.IMJS_AUTH_CLIENT_REDIRECT_URI}} >> .env
          echo IMJS_AUTH_CLIENT_LOGOUT_URI = ${{ secrets.IMJS_AUTH_CLIENT_LOGOUT_URI }}>> .env
          ls -l
          pwd
      # Creating optimized build
      - name: Build
        run: npm run build

      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build